1.Operators are symbols that perform some operation on values, such as +, -, *, /, //, %, and **. Values are the data that operators work on, such as 2, 3.14, or ‘Hello’.
2.spam is a variable, which is a name that refers to a value stored in memory. ‘spam’ is a string, which is a type of value that represents text.
3.Numeric data types: int, float, complex
String data types: str
Sequence types: list, tuple, range
4.An expression is a combination of values, variables, operators, for  getting single output
5.An expression is something that evaluates to a single value, while a statement is an instruction that does something but does not produce a value
6.21
7.he first expression should evaluate to ‘spamspamspam’, which is the result of concatenating two strings: ‘spam’ and ‘spamspam’. The second expression should also evaluate to ‘spamspamspam’, which is the result of multiplying the string ‘spam’ by 3
8. 100 is not a valid variable name in Python because it starts with a number. ‘eggs’ is a valid variable name because it starts with a letter.
9. three functions that can be used to get the integer, floating-point number, or string version of a value are int (), float (), and str (), respectively
10.The expression ‘I have eaten ’ + 99 + ’ burritos.’ causes an error because it tries to concatenate a string and an integer. To fix it, you can convert the integer to a string using the str() function: ‘I have eaten ’ + str(99) + ’ burritos.’
1.The two values of the Boolean data type are True and False
2.The three Boolean operators are and, or, and not
3.A	B	A and B
True	True	True
True	False	False
False	True	False
False	False	False
A	B	A or B
True	True	True
True	False	True
False	True	True
False	False	False
A	not A
True	False
False	True
4.evaluations:
(5 > 4) and (3 == 5) # False
 not (5 > 4) # False (5 > 4) or (3 == 5) # True3 not ((5 > 4) or (3 == 5)) # False (True and True) and (True == False) # False (not False) or (not True) # True
5.The six comparison operators in Python are: less than (<), less than or equal to (<=), greater than (>), greater than or equal to (>=), equal to (==), and not equal to (!=).
6.The equal to operator (==) is a comparison operator that checks if two values are equal to each other and returns a Boolean value. The assignment operator (=), on the other hand, is used to assign a value to a variable.
7.A condition is a statement that is created by the programmer which evaluates actions in the program and evaluates if it’s true or false
8.he three blocks in this code are:

spam = 0
if spam == 10:
print('spam')
9.if spam == 1:
    print('Hello')
elif spam == 2:
    print('Howdy')
else:
    print('Greetings!')

10.Ctrl + C
11.difference between them is that break is used to exit or terminate the loop, while continue is used to skip the current iteration of the loop and move on to the next one
12.range(10) and range(0, 10) are equivalent and will generate a sequence of numbers from 0 to 9. range(0, 10, 1) is also equivalent and will generate the same sequence of numbers.
13.for i in range(1, 11):
    print(i)
i = 1
while i <= 10:
    print(i)
    i += 1
14.spam.bacon()
1.Functions allow the programmer to divide the program into smaller modules or functions and access certain functions when needed
2.The code in a function executes when the function is called, not when the function is defined
3.o create a function in Python, you use the def keyword followed by the name of the function and parentheses.
def hello():
    print("Hello, world!")
4.A function is a block of code that performs a specific task. A function call is the code used to pass control to a function. When you call a function, you are asking it to perform its task.
5.In Python, there are two types of scopes: global and local. A variable defined outside of a function has a global scope and can be accessed from anywhere in the program. A variable defined inside a function has a local scope and can only be accessed from within that function
6.When a function call returns, the local variables defined inside the function are destroyed and their values are lost.
7.A return value is the value that a function returns to the caller. It can be any Python object. When creating a function using the def statement, you can specify what the return value should be with a return statement
8.If a function does not have a return statement, then the return value of a call to that function is `None`.
9.use the global keyword before the variable name at the start of the function. 
10.The data type of None is NoneType. It is used to define a null value or no value at all.
11.does not import any standard or commonly used module in Python. It may either refer to a custom module created by the user 
12.import spam
spam.bacon()
13. you can use a try-except block to handle exceptions.
14.the try clause is used to test a block of code for errors. The except clause is used to handle the error.
1.[] is an empty list in Python. It is a value that contains no items and can be stored in a variable 
2.spam[2] = 'hello'. This will replace the third value (which is 6) with ‘hello’.
3.The value of spam[int(int('3' * 2) / 11)] is d
4.The value of spam[-1] is d.
5.The value of spam[:2] is ['a', 'b'].
6.bacon.index('cat') evaluates to 1.
7.bacon.append(99) makes the list value in bacon look like [3.14, 'cat', 11, 'cat', True, 99].
8.bacon.remove('cat') makes the list value in bacon look like [3.14, 11, 'cat', True].
9.The operator for list concatenation is + and the operator for list replication is *.
10.The append() method adds an element to the end of a list, while the insert() method inserts an element at a specified index. 
11.The remove() method removes the specified item from the list by its value and The del keyword removes the specified index from the list.
12.They can both be accessed by indexes and slices, using square brackets and a colon
13.Lists are mutable, tuples are immutable
14.(42,)
15.To get the tuple form of a list value, you can use the tuple() function.by calling tuple(my_list)
16.variables that “contain” list values don’t actually contain lists directly. Instead, they contain a reference or pointer to the memory location where the list is stored
17.copy.copy()  creates a new object with the same contents as the original object,
copy.deepcopy() creates a deep copy of an object, which means that it creates a new object with the same contents as the original object
1.empty_dict = {}
2.A dictionary value with a key ‘foo’ and a value 42 would look like this: {‘foo’: 42}
3.The main difference between a dictionary and a list is that a dictionary is an unordered collection of key-value pairs, while a list is an ordered collection of elements.
4.If you try to access a key that doesn’t exist in a Python dictionary, you will get a KeyError exception
5.the cat' in spam checks whether there is a value 'cat' for one of the keys in spam, while the 'cat' in spam.keys() checks whether there is a key 'cat' in spam.
6.the 'cat' in spam checks whether there is a key 'cat' in spam, while the 'cat' in spam.values() checks whether there is a value 'cat' for one of the keys in spam
7.spam.setdefault('color', 'black')
8.The pprint module provides a way to print out more nicely formatted data structures, including dictionaries. 

